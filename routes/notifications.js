const express = require("express");
const db = require("../models");
const { Telegraf } = require("telegraf");
const router = express.Router();
const { BOT_TOKEN } = require("../config.json");
const { changeStatus, success } = require("../changestatus.js");

const bot = new Telegraf(BOT_TOKEN);

bot.action(
  /^(accept|reject)_(tech|net|office|access|other)_(\d+)_([^_]+)_(\d+)$/,
  async (ctx) => {
    const action = ctx.match[1];
    const type = ctx.match[2];
    const id = ctx.match[3];
    const status = ctx.match[4];
    const chat_id = ctx.match[5];
    console.log(type);
    try {
      let typeForServer;
      switch (type) {
        case "tech":
          typeForServer = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞—è–≤–∫–∞";
          break;
        case "net":
          typeForServer = "–°–µ—Ç–µ–≤–∞—è –∑–∞—è–≤–∫–∞";
          break;
        case "office":
          typeForServer = "–û—Ñ–∏—Å";
          break;
        case "access":
          typeForServer = "–î–æ—Å—Ç—É–ø";
          break;
        case "other":
          typeForServer = "–î—Ä—É–≥–æ–µ";
          break;
      }

      if (action === "accept") {
        const result = await changeStatus(typeForServer, {
          id,
          status,
          chat_id,
        });

        if (result.success) {
          await ctx.answerCbQuery(result.message);
          await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
          const messageText =
            ctx.update.callback_query.message.text +
            `\n\nüîÑ –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ (–ø—Ä–∏–Ω—è—Ç–æ ${ctx.from.first_name})`;
          await ctx.editMessageText(messageText, { parse_mode: "HTML" });
        } else {
          await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${result.message}`);
        }
      } else {
        const result = await success(typeForServer, { id });

        if (result.success) {
          if (typeForServer === "–î–æ—Å—Ç—É–ø") {
            await ctx.answerCbQuery("‚úÖ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ");
            await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
            const messageText =
              ctx.update.callback_query.message.text +
              `\n\n‚ùå –°—Ç–∞—Ç—É—Å: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ (${ctx.from.first_name})`;
            await ctx.editMessageText(messageText, { parse_mode: "HTML" });
          } else {
            await ctx.answerCbQuery("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

            const messageText =
              ctx.update.callback_query.message.text +
              `\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ (${ctx.from.first_name})`;
            await ctx.editMessageText(messageText, { parse_mode: "HTML" });
          }
        } else {
          await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${result.message}`);
        }
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ ${type}-${id}:`, error);
      await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
    }
  }
);

router.post("/notify-tech", async (req, res) => {
  try {
    const { application } = req.body;
    const masters = await db.users.findAll({
      where: { role: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" },
      attributes: ["chat_id"],
    });

    if (masters.length === 0) {
      return res.json({
        success: false,
        message: "–ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      });
    }

    const messages = masters.map((master) =>
      bot.telegram
        .sendMessage(
          master.chat_id,
          `üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${application.id}\n\n` +
            `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${application.type_of_device}\n` +
            `üî¢ –ù–æ–º–µ—Ä: ${application.number}\n` +
            `‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: ${application.type_of_failure}\n` +
            `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${application.description}\n` +
            `üîÑ –°—Ç–∞—Ç—É—Å: ${application.status}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_tech_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "üîÑ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data: `accept_tech_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data: `reject_tech_${application.id}_${application.status}_${application.chat_id}`,
                  },
                ],
              ],
            },
          }
        )
        .catch((e) =>
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É ${master.chat_id}:`, e)
        )
    );

    await Promise.all(messages);
    res.json({ success: true, notified: masters.length });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

router.post("/notify-network", async (req, res) => {
  try {
    const { application } = req.body;
    const masters = await db.users.findAll({
      where: { role: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" },
      attributes: ["chat_id"],
    });

    if (masters.length === 0) {
      return res.json({
        success: false,
        message: "–ù–µ—Ç —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      });
    }

    const messages = masters.map((master) =>
      bot.telegram
        .sendMessage(
          master.chat_id,
          `üåê –ù–æ–≤–∞—è —Å–µ—Ç–µ–≤–∞—è –∑–∞—è–≤–∫–∞ #${application.id}\n\n` +
            `üìç –õ–æ–∫–∞—Ü–∏—è: ${application.location}\n` +
            `üîå –¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${application.connectionType}\n` +
            `‚ö†Ô∏è –°–∏–º–ø—Ç–æ–º—ã: ${application.signsStr}\n` +
            `‚è±Ô∏è –ù–∞—á–∞–ª–æ—Å—å: ${new Date(
              application.startTime
            ).toLocaleString()}\n` +
            `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${application.description}\n` +
            `üîÑ –°—Ç–∞—Ç—É—Å: ${application.status}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_net_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "üîÑ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data: `accept_net_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data: `reject_net_${application.id}_${application.status}_${application.chat_id}`,
                  },
                ],
              ],
            },
          }
        )
        .catch((e) =>
          console.error(
            `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ç–µ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${master.chat_id}:`,
            e
          )
        )
    );

    await Promise.all(messages);
    res.json({ success: true, notified: masters.length });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

router.post("/notify-office", async (req, res) => {
  try {
    const { application } = req.body;
    const managers = await db.users.findAll({
      where: { role: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∑–∞–∫—É–ø–∫–∞–º" },
      attributes: ["chat_id"],
    });

    if (managers.length === 0) {
      return res.json({
        success: false,
        message: "–ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –∑–∞–∫—É–ø–∫–∞–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      });
    }

    const messages = managers.map((manager) =>
      bot.telegram
        .sendMessage(
          manager.chat_id,
          `üõí –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ #${application.id}\n\n` +
            `üè∑Ô∏è –¢–æ–≤–∞—Ä: ${application.item}\n` +
            `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${application.quantity}\n` +
            `üìç –õ–æ–∫–∞—Ü–∏—è: ${application.location}\n` +
            `üîÑ –°—Ç–∞—Ç—É—Å: ${application.status}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_office_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "üîÑ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data: `accept_office_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data: `reject_office_${application.id}_${application.status}_${application.chat_id}`,
                  },
                ],
              ],
            },
          }
        )
        .catch((e) =>
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É ${manager.chat_id}:`, e)
        )
    );

    await Promise.all(messages);
    res.json({ success: true, notified: managers.length });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});
router.post("/notify-access", async (req, res) => {
  try {
    const { application } = req.body;
    const admins = await db.users.findAll({
      where: { role: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" },
      attributes: ["chat_id"],
    });

    if (admins.length === 0) {
      return res.json({
        success: false,
        message: "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      });
    }

    const messages = admins.map((admin) =>
      bot.telegram
        .sendMessage(
          admin.chat_id,
          `üîë –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø #${application.id}\n\n` +
            `üë§ –ò–º—è: ${application.fname} ${application.lname}\n` +
            `üîì –¢–∏–ø –¥–æ—Å—Ç—É–ø–∞: ${application.access_type}\n` +
            `üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${application.description}\n` +
            `üîÑ –°—Ç–∞—Ç—É—Å: ${application.status}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_access_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data: `accept_access_${application.id}_${application.status}_${application.chat_id}`,
                  },
                ],
              ],
            },
          }
        )
        .catch((e) =>
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${admin.chat_id}:`, e)
        )
    );

    await Promise.all(messages);
    res.json({ success: true, notified: admins.length });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

router.post("/notify-other", async (req, res) => {
  try {
    const { application } = req.body;
    const recipients = await db.users.findAll({
      attributes: ["chat_id"],
    });

    if (recipients.length === 0) {
      return res.json({
        success: false,
        message: "–ù–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      });
    }

    const messages = recipients.map((recipient) =>
      bot.telegram
        .sendMessage(
          recipient.chat_id,
          `‚ùì –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ "–î—Ä—É–≥–æ–µ" #${application.id}\n\n` +
            `üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${application.category}\n` +
            `‚è±Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${application.urgency}\n` +
            `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${application.description}\n` +
            `üîÑ –°—Ç–∞—Ç—É—Å: ${application.status}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: `reject_other_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "üîÑ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data: `accept_other_${application.id}_${application.status}_${application.chat_id}`,
                  },
                  {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data: `reject_other_${application.id}_${application.status}_${application.chat_id}`,
                  },
                ],
              ],
            },
          }
        )
        .catch((e) => console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${recipient.chat_id}:`, e))
    );

    await Promise.all(messages);
    res.json({ success: true, notified: recipients.length });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});
module.exports = router;
